<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Random code]]></title>
  <link href="http://jagg.github.io/atom.xml" rel="self"/>
  <link href="http://jagg.github.io/"/>
  <updated>2016-09-14T21:14:25+01:00</updated>
  <id>http://jagg.github.io/</id>
  <author>
    <name><![CDATA[Jose A. Garcia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking the Vigenère Cipher]]></title>
    <link href="http://jagg.github.io/blog/2016/09/14/breaking-the-vigenere-cipher/"/>
    <updated>2016-09-14T21:19:45+01:00</updated>
    <id>http://jagg.github.io/blog/2016/09/14/breaking-the-vigenere-cipher</id>
    <content type="html"><![CDATA[<p>In my <a href="https://jagg.github.io/blog/2016/09/03/encrypting-like-its-1553/">previous post</a> I explained
how the Vigenère cipher works and how to implement it in Rust. I also mentioned that nowadays this
cipher doesn&rsquo;t offer any security, since it can be easly broken with the help of a computer. Well,
that is exactly what we are going to do now.</p>

<h2>The algorithm</h2>

<p>There are several methods to break Vigenère, usually the outline is:</p>

<ol>
<li><p>Guess the length of the key. There are several probabilistical methods, the main ones, the
Kasiski examination and the Friedman test are described in <a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher#Cryptanalysis">Wikipedia</a>.</p></li>
<li><p>Once we have a likely key length we group all the characters from the cipher text that
are encrypted with each character in the key. So, for example, if the key has size three, we make
three groups, one with the characters in position 1, 4, 7, 11 &hellip;, another with the ones at 2, 5,
8&hellip; and so on, because all of them would have been encrypted using the same charater of the key.</p></li>
<li><p>Each of the groups from before are encrypted using the same character, this is a
<a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher</a>.
To solve it we can just try all the 256 possible values (all the possible values for a byte) and
pick the one that &ldquo;looks better&rdquo; according to some scoring function.</p></li>
</ol>


<p>Also, this particular problem is one of the cryptopals challenges, their instructions about how
to solve it are quite good, you can find them <a href="https://cryptopals.com/sets/1/challenges/6">here</a>.</p>

<h2>The implementation</h2>

<p>Now that we know all the parts of the project, let&rsquo;s start from the top and write what we need.</p>

<h3>Guessing the key size</h3>

<p>This is the most difficult bit. There are several alternatives and all of them are probabilistic,
so we will have to get a set of the best candidates and try them all. We could even try brute
force and test every possible key size until we find one that works.</p>

<p>The alternative described in cryptopals looks fairly easy to implement, so we could start there
and see how well it works.</p>

<p>The idea is to try different key sizes. For each key size K, take the first and second groups of
K bytes from the cipher text and calculate how &ldquo;different&rdquo; they are using the
<a href="https://en.wikipedia.org/wiki/Hamming_distance">Hamming distance</a> and normalizing the result
divinding by K. The key size with the smallest normalized result is likely to be the key. The
description from crytopals mentions that you could take more than two blocks and average the
results to improve the accuracy of the guess.</p>

<p>The truth is that I don&rsquo;t understand very well why this method works (I guess that since you are
repeating the same key, the blocks are more likely to be similar if they match the key size). I
implemented it and, while it worked with the cryptopals challenge file, it didn&rsquo;t guess very
well some of my own encrypted files.</p>

<p>This is my implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">guess_key_size</span><span class="p">(</span><span class="n">cipher</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="o">::</span><span class="n">CipherText</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">heap</span> <span class="o">=</span> <span class="n">BinaryHeap</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">best</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mi">40</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">score</span> <span class="o">=</span> <span class="n">calc_size_score</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cipher</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">(),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">heap</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">KeyScore</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">size</span><span class="o">:</span> <span class="n">i</span> <span class="k">as</span> <span class="kt">u32</span><span class="p">,</span>
</span><span class='line'>            <span class="n">score</span><span class="o">:</span> <span class="n">score</span><span class="p">,</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="kd">let</span> <span class="nb">Some</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">=</span> <span class="n">heap</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">best</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">calc_size_score</span><span class="p">(</span><span class="n">cipher</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">],</span> <span class="n">size</span><span class="o">:</span> <span class="kt">i32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">f32</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">b1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">b2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="p">[</span><span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">..</span><span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">b3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">..</span><span class="mi">3</span> <span class="o">*</span> <span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">b4</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">..</span><span class="mi">4</span> <span class="o">*</span> <span class="n">size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">hamming_dist</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">)</span> <span class="k">as</span> <span class="kt">f32</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">hamming_dist</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b3</span><span class="p">)</span> <span class="k">as</span> <span class="kt">f32</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">d3</span> <span class="o">=</span> <span class="n">hamming_dist</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b4</span><span class="p">)</span> <span class="k">as</span> <span class="kt">f32</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">d4</span> <span class="o">=</span> <span class="n">hamming_dist</span><span class="p">(</span><span class="n">b2</span><span class="p">,</span> <span class="n">b3</span><span class="p">)</span> <span class="k">as</span> <span class="kt">f32</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">d5</span> <span class="o">=</span> <span class="n">hamming_dist</span><span class="p">(</span><span class="n">b2</span><span class="p">,</span> <span class="n">b4</span><span class="p">)</span> <span class="k">as</span> <span class="kt">f32</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">d6</span> <span class="o">=</span> <span class="n">hamming_dist</span><span class="p">(</span><span class="n">b3</span><span class="p">,</span> <span class="n">b4</span><span class="p">)</span> <span class="k">as</span> <span class="kt">f32</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">((</span><span class="n">d1</span> <span class="o">+</span> <span class="n">d2</span> <span class="o">+</span> <span class="n">d3</span> <span class="o">+</span> <span class="n">d4</span> <span class="o">+</span> <span class="n">d5</span> <span class="o">+</span> <span class="n">d6</span><span class="p">)</span> <span class="o">/</span> <span class="mf">6.0</span><span class="p">)</span> <span class="o">/</span> <span class="n">size</span> <span class="k">as</span> <span class="kt">f32</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code returns the three most likely sizes so that we can test them all.</p>

<h3>Grouping the characters</h3>

<p>The logic behind this is not too difficult, but it will be easier to isolate this bit so that it
can be tested independently. So we start with the cipher text, a vector of bytes. If we look at
them as ASCII characters for a moment, we will have something meaningless like:</p>

<p>V: <code>wjmzbfapk</code></p>

<p>Now, if our key size is three, we want to break it down into three vectors:</p>

<p>V1: <code>wza</code>
V2: <code>jbp</code>
V3: <code>mfk</code></p>

<p>We now that V1 was encrypted with the first byte of the key, V2 with the second and so on. Now
we would run our brute force decryption function (described in the next section) and reassemble the
output again into a single vector:</p>

<p>V': <code>whizzbang</code></p>

<p>To represent this we can use a struct, keeping the byte vector and the size of the key we are trying
as fields.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">ByteMatrix</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">matrix</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">row_size</span><span class="o">:</span> <span class="n">usize</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will need some operations to transpose the contents and to reassemble the result into a single
vector again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">to_matrix</span><span class="p">(</span><span class="n">vector</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">],</span> <span class="n">size</span><span class="o">:</span> <span class="n">usize</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ByteMatrix</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="k">mut</span> <span class="n">vectors</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="n">size</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vectors</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span> <span class="k">in</span> <span class="n">vector</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">enumerate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vectors</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="n">size</span><span class="p">].</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">byte</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ByteMatrix</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">matrix</span><span class="o">:</span> <span class="n">vectors</span><span class="p">,</span>
</span><span class='line'>     <span class="n">row_size</span><span class="o">:</span> <span class="n">size</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">reassemble</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">let</span> <span class="k">mut</span> <span class="n">bytes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">max_size</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="n">max_size</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="bp">self</span><span class="p">.</span><span class="n">row_size</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">let</span> <span class="n">this_size</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">len</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">this_size</span> <span class="o">&gt;</span> <span class="n">i</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">bytes</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">matrix</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">bytes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can deal with each row independently but we still need a way to transform the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">transform</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">fun</span><span class="o">:</span> <span class="n">F</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ByteMatrix</span>
</span><span class='line'>  <span class="n">where</span> <span class="n">F</span><span class="o">:</span> <span class="n">FnMut</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">let</span> <span class="n">vecs</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">matrix</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">).</span><span class="n">collect</span><span class="p">();</span>
</span><span class='line'>  <span class="n">ByteMatrix</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">matrix</span><span class="o">:</span> <span class="n">vecs</span><span class="p">,</span>
</span><span class='line'>      <span class="n">row_size</span><span class="o">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">row_size</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Breaking the Caesar cipher</h3>

<p>And now the last step. We have several byte vectors encoded using a single byte (Caesar cipher), so
we are going to try each possible key value and see which one of the outputs makes sense!
Obviously we are not going to print them all and pick ourselves, we need a scoring function to
pick one for us.</p>

<p>There are many ways to score the deciphered text, one common way is to check the frequency of each
character for your particular language and see how well your text follows the distribution. For our
purposes we don&rsquo;t need to do anything that complicated. Since we know that most of the text is going
to be made of lowercase latin characters we can add one to the score every time we found one. We
also know that there are a few others that are very unlikely, so we reduce the score by one when
we find them.</p>

<p>This is one possible scoring function we could use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">score</span><span class="p">(</span><span class="n">input</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">u32</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">input</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">fold</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">|</span><span class="n">acc</span><span class="p">,</span> <span class="n">b</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">*</span><span class="n">b</span> <span class="o">&gt;=</span> <span class="mi">97</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="mi">122</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">acc</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">*</span><span class="n">b</span> <span class="o">&gt;=</span> <span class="mi">33</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="mi">64</span> <span class="o">&amp;&amp;</span> <span class="n">acc</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">acc</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">acc</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we use this function with each one of our candidates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">decode_single_key</span><span class="p">(</span><span class="n">cipher</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="o">::</span><span class="n">CipherText</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">cipher</span><span class="o">::</span><span class="n">PlainText</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">plain</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">best_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">..</span><span class="mi">255_</span><span class="k">u8</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">candidate</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">::</span><span class="n">decrypt_single_key</span><span class="p">(</span><span class="n">cipher</span><span class="p">,</span> <span class="n">key</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="o">&amp;</span><span class="n">candidate</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">best_score</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best_score</span> <span class="o">=</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>            <span class="n">plain</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="n">candidate</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">plain</span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the inclusive range in the for loop, that is an unstable feature in rust, so we need to include
<code>#![feature(inclusive_range_syntax)]</code> in the definition of our module.</p>

<h3>Putting it all together</h3>

<p>Now we have all the pieces, let&rsquo;s use them to break the cipher!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">break_cipher</span><span class="p">(</span><span class="n">cipher</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="o">::</span><span class="n">CipherText</span><span class="p">,</span> <span class="n">key_size</span><span class="o">:</span> <span class="kt">u32</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">cipher</span><span class="o">::</span><span class="n">PlainText</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">byte_matrix</span><span class="o">::</span><span class="n">ByteMatrix</span><span class="o">::</span><span class="n">to_matrix</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cipher</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">(),</span> <span class="n">key_size</span> <span class="k">as</span> <span class="n">usize</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="o">|</span><span class="n">vec</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;|</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">::</span><span class="n">CipherText</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">vec</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">plain</span> <span class="o">=</span> <span class="n">decode_single_key</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cipher</span><span class="p">);</span>
</span><span class='line'>        <span class="n">plain</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">()</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">decoded</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">reassemble</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">plain</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">::</span><span class="n">PlainText</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">decoded</span><span class="p">);</span>
</span><span class='line'>    <span class="n">plain</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">decode_text</span><span class="p">(</span><span class="n">cipher</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">cipher</span><span class="o">::</span><span class="n">CipherText</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">cipher</span><span class="o">::</span><span class="n">PlainText</span><span class="p">,</span> <span class="n">cipher</span><span class="o">::</span><span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">best_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">candidate</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">key_size_guesses</span> <span class="o">=</span> <span class="n">guess_key_size</span><span class="p">(</span><span class="n">cipher</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key_size</span> <span class="k">in</span> <span class="n">key_size_guesses</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">plain</span> <span class="o">=</span> <span class="n">break_cipher</span><span class="p">(</span><span class="n">cipher</span><span class="p">,</span> <span class="o">*</span><span class="n">key_size</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="o">&amp;</span><span class="n">plain</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">best_score</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">best_score</span> <span class="o">=</span> <span class="n">score</span><span class="p">;</span>
</span><span class='line'>            <span class="n">candidate</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="n">plain</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">candidate</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">None</span> <span class="o">=&gt;</span> <span class="nb">Err</span><span class="p">(</span><span class="n">cipher</span><span class="o">::</span><span class="n">Error</span><span class="o">::</span><span class="n">Failure</span><span class="p">(</span><span class="s">&quot;Couldn&#39;t decode text&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">())),</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="n">plain</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Ok</span><span class="p">(</span><span class="n">plain</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like last time, you can find the full source for this post in my <a href="https://github.com/jagg/vigenere">github account</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encrypting Like It's 1553]]></title>
    <link href="http://jagg.github.io/blog/2016/09/03/encrypting-like-its-1553/"/>
    <updated>2016-09-03T16:46:54+01:00</updated>
    <id>http://jagg.github.io/blog/2016/09/03/encrypting-like-its-1553</id>
    <content type="html"><![CDATA[<h2>The set up</h2>

<p>Italy, 1553, a book is published: La Cifra del Sig. Giovan Battista Bellaso. The book describes a
new cipher consisting on a table of character substitutions that, with the help of a previously
agreed key, could be used to encrypt a text.</p>

<p>This system is one of the simplest members of the family of polyalphabetic ciphers (the same family
as the Enigma machine) and has been reinvented many times over the centuries. At some point during
the 19th century it was misattributed to Blaise de Vigenère, a contemporary cryptographer who
invented a similar, stronger cipher. Thanks to this Bellaso&rsquo;s method is more commonly known as
the Vigenère cipher.</p>

<p>Even when this cipher wasn&rsquo;s as strong as the one really invented by Vigenère, it did quite well
for the next three centuries. During this time it was considered unbreakable until a method able to
decipher it was published in 1863.</p>

<h2>The problem</h2>

<p>Times have changed and we don&rsquo;t have to use a table to encrypt each character by hand in our
messages before sending them, we can just use a computer to do all the hard work for us.</p>

<p>The way to translate this cipher to our world of ones an zeros is quite simple. You choose a key of
size <code>n</code>, let&rsquo;s say &ldquo;KEY&rdquo;, and using its binary representation (e.g. ASCII) just apply XOR<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>
operations repeteadly between each group of <code>n</code> characters in our message and the key.</p>

<p>Decoding it it&rsquo;s just as easy. Literally just as easy, just apply the same XOR operations as
before over the cipher text and you get the original message!</p>

<p>Note that in the same way we can use computers to encrypt text easily following this cipher, they
can also be used to break it. The Vigenère can be broken easly if the difference between the size
of the encrypted text and the key is big.</p>

<h2>The code</h2>

<p>I&rsquo;m currently learning Rust and this looks like an oportunity to play with it and see how it goes,
so let&rsquo;s see how we can model this in a more or less idiomatic way.</p>

<p>Our inputs and outputs are always going to be strings but internally we want to operate directly
with arrays of bytes. Also, we can leverage the type system a bit and create different types for
plain and encrypted text. With this in mind we can start with these structs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">CipherText</span><span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'><span class="k">pub</span> <span class="k">struct</span> <span class="n">PlainText</span><span class="p">(</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, chances are that once the plain text is encrypted it will not be valid UTF-8, so we need a
different representation for those bytes. Luckily we have all we need in the
<a href="https://github.com/rust-lang-nursery/rustc-serialize">rustc_serialize</a> crate, it comes with some
traits to encode and decode byte slices (&amp;[u8]) as Hexadecimal or Base64 (<code>ToHex</code>, <code>FromHex</code>,
<code>ToBase64</code> and <code>FromBase64</code>). Also, since our types are just wrappers on top of a Vec<u8> it seems
we could even derive these traits automatically, but this is not available in stable rust, so in
this case we can just implement some utility methods ourselves and make them return our own
custom Error type to make dealing with error conditions easier down the line.</p>

<p>So, we can implement <code>from</code> and <code>to</code> methods for our external representations (UTF-8, Hexadecimal
and Base64). You can see the Base64 methods for CipherText here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">impl</span> <span class="n">CipherText</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">pub</span> <span class="k">fn</span> <span class="n">from_b64</span><span class="p">(</span><span class="n">b64</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">CipherText</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">cipher_bytes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">try</span><span class="o">!</span><span class="p">(</span><span class="n">b64</span><span class="p">.</span><span class="n">from_base64</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map_err</span><span class="p">(</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">Error</span><span class="o">::</span><span class="n">Base64</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">to_string</span><span class="p">())));</span>
</span><span class='line'>    <span class="nb">Ok</span><span class="p">(</span><span class="n">CipherText</span><span class="p">(</span><span class="n">cipher_bytes</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">pub</span> <span class="k">fn</span> <span class="n">to_b64</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="o">&amp;</span><span class="n">CipherText</span><span class="p">(</span><span class="k">ref</span> <span class="n">vec_bytes</span><span class="p">)</span> <span class="o">=</span> <span class="bp">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">vec_bytes</span><span class="p">.</span><span class="n">to_base64</span><span class="p">(</span><span class="n">STANDARD</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also specify the different kind of errors we can deal with in our custom error type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">enum</span> <span class="n">Error</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Hex</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>  <span class="n">Base64</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>  <span class="n">UTF8</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, now we can deal with our plain and cipher text without having to worry about in which format
they were, we just import them using the appropriate method and then we can forget about it!</p>

<p>So now we just need to do something with them, we want to be able to encrypt and decrypt text using
a key. As we said before both operations are identical for this cipher, we just apply a binary XOR
between the text and our key as many times as necessary to fit the full input<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">repeating_xor</span><span class="p">(</span><span class="n">input</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">],</span> <span class="n">key</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="k">mut</span> <span class="n">out</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Vec</span><span class="o">::</span><span class="n">with_capacity</span><span class="p">(</span><span class="n">input</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">out</span><span class="p">.</span><span class="n">set_len</span><span class="p">(</span><span class="n">input</span><span class="p">.</span><span class="n">len</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">in_val</span><span class="p">)</span> <span class="k">in</span> <span class="n">input</span><span class="p">.</span><span class="n">iter</span><span class="p">().</span><span class="n">enumerate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">in_val</span> <span class="o">^</span> <span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="n">key</span><span class="p">.</span><span class="n">len</span><span class="p">()];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">out</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have all the pieces, we can implement our encrypt and decrypt methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="n">fr</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">text</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">PlainText</span><span class="p">,</span> <span class="n">key</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CipherText</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="o">&amp;</span><span class="n">PlainText</span><span class="p">(</span><span class="k">ref</span> <span class="n">bytes</span><span class="p">)</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">xored</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">repeating_xor</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">());</span>
</span><span class='line'>  <span class="n">CipherText</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xored</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">cipher_text</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">CipherText</span><span class="p">,</span> <span class="n">key</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="n">PlainText</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="o">&amp;</span><span class="n">CipherText</span><span class="p">(</span><span class="k">ref</span> <span class="n">bytes</span><span class="p">)</span> <span class="o">=</span> <span class="n">cipher_text</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">xored</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">repeating_xor</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">.</span><span class="n">as_bytes</span><span class="p">());</span>
</span><span class='line'>  <span class="nb">Ok</span><span class="p">(</span><span class="n">PlainText</span><span class="o">::</span><span class="n">from_bytes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xored</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should also write some tests to verify that our code actually works. We can take some text,
encrypt it and check if the text stays the same when we decrypt it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">check_text</span><span class="p">(</span><span class="n">text</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">plain_text</span> <span class="o">=</span> <span class="n">PlainText</span><span class="o">::</span><span class="n">from_string</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">key</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;toy&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">let</span> <span class="n">decoded_text</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">encrypt</span><span class="p">(</span><span class="o">&amp;</span><span class="n">plain_text</span><span class="p">,</span> <span class="n">key</span><span class="p">),</span> <span class="n">key</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>  <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">decoded_text</span><span class="p">.</span><span class="n">to_utf8</span><span class="p">().</span><span class="n">unwrap</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[test]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">test_encrypt_and_decrypt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">check_text</span><span class="p">(</span><span class="s">&quot;This is the plain text</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_text</span><span class="p">(</span><span class="s">&quot;123, 456&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_text</span><span class="p">(</span><span class="s">&quot;!£$%^&amp;*@~:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">check_text</span><span class="p">(</span><span class="s">&quot;日本語&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Closing thoughts</h2>

<p>Now we have a very simple program that does something sort of useful, we can extend it to read and
write from files and create a simple command line interface to send secret messages in a completely
unsecure way!</p>

<p>The idea behind all this was to write some simple, self contained program in Rust to understand
how it works. In this case we haven&rsquo;t come across anything complicated, the ownership rules were
evident and we didn&rsquo;t have any lifetime issues so we&rsquo;ll have to pick something more complicated
next time to play with those things.</p>

<p>Also I haven&rsquo;t tried debugging, profiling or benchmarking yet, all critical things for any serious
production work so I still have plenty to investigate and maybe write about in my next post.</p>

<p>You can find the full source for this post in my <a href="https://github.com/jagg/vigenere">github account</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is really an XOR cipher, another substitution cipher with similar security. It&rsquo;s the same concept but it operates with bits instead of characters.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Note that if the key and the text have the same size we only have to do it once, that is called a One Time Pad and if our key was copletely random this cipher would be theoretically unbreakable!<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
